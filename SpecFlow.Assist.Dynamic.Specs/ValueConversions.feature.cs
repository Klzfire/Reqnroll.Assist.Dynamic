// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.Assist.Dynamic.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Conversions of values")]
    public partial class ConversionsOfValuesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ValueConversions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Conversions of values", "\tIn order to easier compare values of the most common types\r\n\tAs a user of SpecFl" +
                    "ow Dynamic\r\n\tI want SpecFlow Dynamic to translate strings into the closest resse" +
                    "mbling real type", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Strings should be translated to string")]
        public virtual void StringsShouldBeTranslatedToString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Strings should be translated to string", null, ((string[])(null)));
#line 7
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table41.AddRow(new string[] {
                        "Marcus"});
#line 8
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table41, "When ");
#line 11
  testRunner.Then("the Name property should equal \'Marcus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Integers should be translated from strings")]
        public virtual void IntegersShouldBeTranslatedFromStrings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Integers should be translated from strings", null, ((string[])(null)));
#line 13
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Age"});
            table42.AddRow(new string[] {
                        "39"});
#line 14
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table42, "When ");
#line 17
  testRunner.Then("the Age property should equal 39", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Doubles should be translated from strings")]
        public virtual void DoublesShouldBeTranslatedFromStrings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Doubles should be translated from strings", null, ((string[])(null)));
#line 19
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Length in meters"});
            table43.AddRow(new string[] {
                        "1.96"});
#line 20
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table43, "When ");
#line 23
  testRunner.Then("the LengthInMeters property should equal \'1.96\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Decimals should be translated from strings")]
        public virtual void DecimalsShouldBeTranslatedFromStrings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decimals should be translated from strings", null, ((string[])(null)));
#line 25
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Molecular Weight"});
            table44.AddRow(new string[] {
                        "1000000000.1111991111"});
#line 26
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table44, "When ");
#line 29
  testRunner.Then("the MolecularWeight property should equal \'1000000000.1111991111\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dates should be translated from strings")]
        public virtual void DatesShouldBeTranslatedFromStrings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dates should be translated from strings", null, ((string[])(null)));
#line 31
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Birth date"});
            table45.AddRow(new string[] {
                        "1972-10-09"});
#line 32
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table45, "When ");
#line 35
  testRunner.Then("the BirthDate property should equal 1972-10-09", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bools should be translated from strings")]
        public virtual void BoolsShouldBeTranslatedFromStrings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bools should be translated from strings", null, ((string[])(null)));
#line 37
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Is developer"});
            table46.AddRow(new string[] {
                        "false"});
#line 38
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table46, "When ");
#line 41
  testRunner.Then("the IsDeveloper property should equal \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A strange double should not be translated into a date")]
        public virtual void AStrangeDoubleShouldNotBeTranslatedIntoADate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A strange double should not be translated into a date", null, ((string[])(null)));
#line 43
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Length in meters"});
            table47.AddRow(new string[] {
                        "4.567"});
#line 44
  testRunner.When("I create a dynamic instance from this table", ((string)(null)), table47, "When ");
#line 47
  testRunner.Then("the LengthInMeters property should equal \'4.567\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for instance creation")]
        public virtual void TheresWaysToDisableTypeConversionForInstanceCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There\'s ways to disable type conversion for instance creation", null, ((string[])(null)));
#line 49
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table48.AddRow(new string[] {
                        "012345",
                        "044",
                        "1972-13-09",
                        "1,96"});
#line 50
  testRunner.When("I create a dynamic instance from this table using no type conversion", ((string)(null)), table48, "When ");
#line 53
  testRunner.Then("the Name value should still be \'012345\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
  testRunner.And("the Age value should still be \'044\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
  testRunner.And("the birth date should still be \'1972-13-09\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("length in meter should still be \'1,96\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for instance creation with key/value tabl" +
            "es")]
        public virtual void TheresWaysToDisableTypeConversionForInstanceCreationWithKeyValueTables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There\'s ways to disable type conversion for instance creation with key/value tabl" +
                    "es", null, ((string[])(null)));
#line 58
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table49.AddRow(new string[] {
                        "Name",
                        "012345"});
            table49.AddRow(new string[] {
                        "Age",
                        "044"});
            table49.AddRow(new string[] {
                        "Birth date",
                        "1972-13-09"});
            table49.AddRow(new string[] {
                        "Length in meters",
                        "1,96"});
#line 59
  testRunner.When("I create a dynamic instance from this table using no type conversion", ((string)(null)), table49, "When ");
#line 65
  testRunner.Then("the Name value should still be \'012345\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
  testRunner.And("the Age value should still be \'044\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And("the birth date should still be \'1972-13-09\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("length in meter should still be \'1,96\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for set creation")]
        public virtual void TheresWaysToDisableTypeConversionForSetCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There\'s ways to disable type conversion for set creation", null, ((string[])(null)));
#line 70
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age"});
            table50.AddRow(new string[] {
                        "012345",
                        "044"});
            table50.AddRow(new string[] {
                        "Arvid",
                        "1"});
#line 71
  testRunner.When("I create a set of dynamic instances from this table using no type conversion", ((string)(null)), table50, "When ");
#line 75
  testRunner.Then("I should have a list of 2 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
  testRunner.And("the 1 item should still Name equal \'012345\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("the 1 item should still Age equal \'044\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for matching a dynamic instance against a" +
            " table")]
        public virtual void TheresWaysToDisableTypeConversionForMatchingADynamicInstanceAgainstATable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There\'s ways to disable type conversion for matching a dynamic instance against a" +
                    " table", null, ((string[])(null)));
#line 79
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age"});
            table51.AddRow(new string[] {
                        "012345",
                        "039"});
#line 80
  testRunner.Given("I create a dynamic instance from this table using no type conversion", ((string)(null)), table51, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age"});
            table52.AddRow(new string[] {
                        "012345",
                        "039"});
#line 83
  testRunner.When("I compare it to this table using no type conversion", ((string)(null)), table52, "When ");
#line 86
  testRunner.Then("no instance comparison exception should have been thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Comparing against an identical table should match")]
        public virtual void ComparingAgainstAnIdenticalTableShouldMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comparing against an identical table should match", null, ((string[])(null)));
#line 88
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age"});
            table53.AddRow(new string[] {
                        "012345",
                        "039"});
            table53.AddRow(new string[] {
                        "065484",
                        "003"});
#line 89
  testRunner.Given("I create a set of dynamic instances from this table using no type conversion", ((string)(null)), table53, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age"});
            table54.AddRow(new string[] {
                        "012345",
                        "039"});
            table54.AddRow(new string[] {
                        "065484",
                        "003"});
#line 93
  testRunner.When("I compare the set to this table using no type conversion", ((string)(null)), table54, "When ");
#line 97
  testRunner.Then("no set comparison exception should have been thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
